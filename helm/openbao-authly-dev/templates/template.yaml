---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: {{ .Release.Namespace }}
  name: openbao
  labels:
    app.kubernetes.io/name: openbao
    app.kubernetes.io/instance: openbao
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: openbao-server-binding
  labels:
    app.kubernetes.io/name: openbao
    app.kubernetes.io/instance: openbao
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    namespace: {{ .Release.Namespace }}
    name: openbao
---
# Service for OpenBao cluster
apiVersion: v1
kind: Service
metadata:
  namespace: {{ .Release.Namespace }}
  name: openbao-internal
  labels:
    app.kubernetes.io/name: openbao
    app.kubernetes.io/instance: openbao
    openbao-internal: "true"
  annotations:
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: "http"
      port: 8200
      targetPort: 8200
    - name: https-internal
      port: 8201
      targetPort: 8201
  selector:
    app.kubernetes.io/name: openbao
    app.kubernetes.io/instance: openbao
    component: server
---
# Service for OpenBao cluster
apiVersion: v1
kind: Service
metadata:
  namespace: {{ .Release.Namespace }}
  name: openbao
  labels:
    app.kubernetes.io/name: openbao
    app.kubernetes.io/instance: openbao
  annotations:
spec:
  # We want the servers to become available even if they're not ready
  # since this DNS is also used for join operations.
  publishNotReadyAddresses: true
  ports:
    - name: http
      port: 8200
      targetPort: 8200
    - name: https-internal
      port: 8201
      targetPort: 8201
  selector:
    app.kubernetes.io/name: openbao
    app.kubernetes.io/instance: openbao
    component: server
---
# ConfigMap for Authly policy
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: {{ .Release.Namespace }}
  name: openbao-authly-policy-map
data:
  authly_policy.hcl: |
    # Allow token to create, update and read secrets at the given path
    path "secret/data/authly-*" {
      capabilities = ["create", "update", "read"]
    }
    # Allow tokens to look up their own properties
    path "auth/token/lookup-self" {
        capabilities = ["read"]
    }
    # Allow tokens to renew themselves
    path "auth/token/renew-self" {
        capabilities = ["update"]
    }
    # Allow tokens to revoke themselves
    path "auth/token/revoke-self" {
        capabilities = ["update"]
    }
---
# StatefulSet to run the actual openbao server cluster.
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: openbao
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: openbao
    app.kubernetes.io/instance: openbao
spec:
  serviceName: openbao-internal
  podManagementPolicy: Parallel
  replicas: 1
  updateStrategy:
    type: OnDelete
  selector:
    matchLabels:
      app.kubernetes.io/name: openbao
      app.kubernetes.io/instance: openbao
      component: server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: openbao
        app.kubernetes.io/instance: openbao
        component: server
      annotations:
    spec:
      terminationGracePeriodSeconds: 10
      serviceAccountName: openbao
      securityContext:
        runAsNonRoot: true
        runAsGroup: 1000
        runAsUser: 100
        fsGroup: 1000
      hostNetwork: false
      volumes:
        - name: home
          emptyDir: {}
        # Authly policy volume mapping
        - name: authly-policy
          configMap:
            name: openbao-authly-policy-map
      containers:
        - name: openbao
          image: quay.io/openbao/openbao:2.1.0
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/sh"
            - "-ec"
          args:
            - |
              /usr/local/bin/docker-entrypoint.sh bao server -dev
          securityContext:
            allowPrivilegeEscalation: false
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: BAO_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: BAO_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: BAO_ADDR
              value: "http://127.0.0.1:8200"
            - name: BAO_API_ADDR
              value: "http://$(POD_IP):8200"
            - name: SKIP_CHOWN
              value: "true"
            - name: SKIP_SETCAP
              value: "true"
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: BAO_CLUSTER_ADDR
              value: "https://$(HOSTNAME).openbao-internal:8201"
            - name: HOME
              value: "/home/openbao"
            - name: VAULT_DEV_ROOT_TOKEN_ID
              value: theenigmaticbaobunofancientsecrets
            - name: VAULT_DEV_LISTEN_ADDRESS
              value: "[::]:8200"
          volumeMounts:
            - name: home
              mountPath: /home/openbao
            # Mount Authly policy
            - name: authly-policy
              mountPath: /tmp/authly_policy.hcl
              subPath: authly_policy.hcl
          ports:
            - containerPort: 8200
              name: http
            - containerPort: 8201
              name: https-internal
            - containerPort: 8202
              name: http-rep
          readinessProbe:
            # Check status; unsealed openbao servers return 0
            # The exit code reflects the seal status:
            #   0 - unsealed
            #   1 - error
            #   2 - sealed
            exec:
              command: ["/bin/sh", "-ec", "bao status -tls-skip-verify"]
            failureThreshold: 2
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          lifecycle:
            # openbao container doesn't receive SIGTERM from Kubernetes
            # and after the grace period ends, Kube sends SIGKILL.  This
            # causes issues with graceful shutdowns such as deregistering itself
            # from Consul (zombie services).
            preStop:
              exec:
                command: [
                    "/bin/sh",
                    "-c",
                    # Adding a sleep here to give the pod eviction a
                    # chance to propagate, so requests will not be made
                    # to this pod while it's terminating
                    "sleep 5 && kill -SIGTERM $(pidof bao)",
                  ]
            # Set up openbao for
            postStart:
              exec:
                command: [
                    "/bin/sh",
                    "-c",
                    "bao policy write authly /tmp/authly_policy.hcl \
                    && bao auth enable kubernetes \
                    && bao write auth/kubernetes/config \
                      kubernetes_host=https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT \
                    && bao write auth/kubernetes/role/authly \
                      bound_service_account_names=authly \
                      bound_service_account_namespaces=* \
                      policies=authly \
                      ttl=24h",
                  ]
